import json
import os
import time
import threading
from phBot import *
import QtBind
import shutil
from datetime import datetime
from threading import Timer

pName = "CaveMole"

def log(text):
    log_('[' + pName + '] ' + text)

# Plugin window
gui = QtBind.init(__name__, pName)
cbxAutoAttack = QtBind.createCheckBox(gui, 'cbxDoNothingClicked', "Auto Attack", 6, 10)
cbxPickDrops = QtBind.createCheckBox(gui, 'cbxDoNothingClicked', "Pick Drops", 6, 35)
cbxAutoEnterFGW = QtBind.createCheckBox(gui, 'cbxDoNothingClicked', "Auto Enter FGW", 6, 60)
cbxUseReturnScroll = QtBind.createCheckBox(gui, 'cbxDoNothingClicked', "Use Return Scroll", 6, 85)
txtMobName = QtBind.createLineEdit(gui, "", 120, 10, 120, 20)
QtBind.createLabel(gui, "Mob Name:", 60, 10)
txtMobCount = QtBind.createLineEdit(gui, "", 120, 35, 120, 20)
QtBind.createLabel(gui, "Mob Count:", 60, 35)
txtDelay = QtBind.createLineEdit(gui, "500", 120, 60, 120, 20)
QtBind.createLabel(gui, "Delay (ms):", 60, 60)

# Global variables
TimerStarted = False
TimerDuration = 3 * 60 * 60  # 3 saat
ConfigsPath = os.path.join(get_config_dir(), "CaveMole_config.json")
CurrentStage = 0

# ============================= CONFIG MANAGEMENT =============================
def saveConfigs():
    config = {
        "auto_attack": QtBind.isChecked(gui, cbxAutoAttack),
        "pick_drops": QtBind.isChecked(gui, cbxPickDrops),
        "auto_enter_fgw": QtBind.isChecked(gui, cbxAutoEnterFGW),
        "use_return_scroll": QtBind.isChecked(gui, cbxUseReturnScroll),
        "mob_name": QtBind.text(gui, txtMobName),
        "mob_count": QtBind.text(gui, txtMobCount),
        "delay": QtBind.text(gui, txtDelay)
    }
    with open(ConfigsPath, 'w') as f:
        json.dump(config, f, indent=4)

def loadConfigs():
    if os.path.exists(ConfigsPath):
        with open(ConfigsPath, 'r') as f:
            config = json.load(f)
            QtBind.setChecked(gui, cbxAutoAttack, config.get("auto_attack", False))
            QtBind.setChecked(gui, cbxPickDrops, config.get("pick_drops", False))
            QtBind.setChecked(gui, cbxAutoEnterFGW, config.get("auto_enter_fgw", False))
            QtBind.setChecked(gui, cbxUseReturnScroll, config.get("use_return_scroll", False))
            QtBind.setText(gui, txtMobName, config.get("mob_name", ""))
            QtBind.setText(gui, txtMobCount, config.get("mob_count", ""))
            QtBind.setText(gui, txtDelay, config.get("delay", "500"))

loadConfigs()

# ============================= UTIL FUNCTIONS =============================
def cbxDoNothingClicked():
    saveConfigs()

def GetMobCount():
    mobName = QtBind.text(gui, txtMobName).strip().lower()
    if not mobName:
        return 0
    count = 0
    mobs = get_monsters()
    if mobs:
        for _, mob in mobs.items():
            if mobName in mob['name'].lower():
                count += 1
    return count

def AttackMobs():
    if not QtBind.isChecked(gui, cbxAutoAttack):
        return
    mobName = QtBind.text(gui, txtMobName).strip().lower()
    if not mobName:
        return
    mobs = get_monsters()
    if mobs:
        for key, mob in mobs.items():
            if mobName in mob['name'].lower():
                inject_joymax(0x7045, struct.pack("<I", key), False)
                time.sleep(0.1)

def WaitPickableDrops():
    if not QtBind.isChecked(gui, cbxPickDrops):
        return
    while True:
        drops = get_drops()
        if not drops:
            break
        time.sleep(1)

def UseReturnScroll():
    if QtBind.isChecked(gui, cbxUseReturnScroll):
        log("Using return scroll...")
        use_item(0)

# ============================= FGW LOGIC =============================
def GetDimensionalHole():
    items = get_inventory()
    if items:
        for slot, item in items.items():
            if item['name'].startswith("Dimensional Hole"):
                return slot
    return -1

def EnterToDimensional():
    slot = GetDimensionalHole()
    if slot >= 0:
        log("Entering FGW via Dimensional Hole...")
        use_item(slot)
        return True
    log("No Dimensional Hole found.")
    return False

def GoDimensionalThread():
    global TimerStarted
    if TimerStarted:
        return
    TimerStarted = True
    log("Waiting 3 hours before next FGW entry...")
    time.sleep(TimerDuration)
    EnterToDimensional()
    TimerStarted = False

# ============================= MAIN CONTROL =============================
def event_loop():
    if not is_connected():
        return

    delay = int(QtBind.text(gui, txtDelay)) / 1000
    mobCountTarget = int(QtBind.text(gui, txtMobCount) or 0)

    if QtBind.isChecked(gui, cbxAutoAttack):
        if GetMobCount() >= mobCountTarget:
            AttackMobs()

    if QtBind.isChecked(gui, cbxPickDrops):
        WaitPickableDrops()

    if QtBind.isChecked(gui, cbxUseReturnScroll):
        UseReturnScroll()

    if QtBind.isChecked(gui, cbxAutoEnterFGW):
        threading.Thread(target=GoDimensionalThread).start()

    time.sleep(delay)

# ============================= SCRIPT LOOP =============================
def start_bot():
    while True:
        try:
            event_loop()
        except Exception as e:
            log(f"Error in main loop: {e}")
        time.sleep(0.1)

threading.Thread(target=start_bot).start()
